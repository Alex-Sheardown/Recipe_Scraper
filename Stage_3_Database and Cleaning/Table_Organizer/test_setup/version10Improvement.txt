1. Logging System:

Implement a logging system using Python's built-in logging module. This will allow you to record important events, errors, and debugging information in a structured manner.
Create different log levels (e.g., INFO, WARNING, ERROR) to categorize log messages based on their severity.
Instead of printing errors to the terminal, log them using the logging system. This provides a more organized way to track issues.
Use log files to store the logs so you can review them later if needed.
2. Runtime Checks:

Implement checks at critical points in your code to verify that the expected operations are successful. For example, after applying the fraction system, you can check if the text has been correctly converted.
Define success criteria for different parts of your code and use assertions or conditional statements to confirm if they are met.
Keep track of the links, input data, and expected output for various test cases. You can compare the results at runtime to ensure that your code is behaving as expected.
3. Error Handling:

Review your try-except blocks and error-handling mechanisms. If there are too many exceptions being caught and not properly handled, it can make it difficult to diagnose issues.
Ensure that exceptions are only caught when necessary and that you provide meaningful error messages or log entries to help identify the problem.
4. Testing and Debugging:

Continue testing your code with various inputs, including edge cases and unexpected data, to uncover potential issues.
Use debugging tools, such as pdb or integrated development environment (IDE) debuggers, to step through your code and identify the point at which it unexpectedly exits.
5. Documentation:

Maintain clear and up-to-date documentation for your code, including instructions for setting up the logging system and understanding the runtime checks.
Document the purpose and expected behavior of each function or module within your codebase.

Parts that need work 
per person needs work considering the detail needed for it